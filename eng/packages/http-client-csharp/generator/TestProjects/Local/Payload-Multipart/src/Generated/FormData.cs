// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Payload.MultiPart.Models;

namespace Payload.MultiPart
{
    /// <summary></summary>
    public partial class FormData
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of FormData for mocking. </summary>
        protected FormData()
        {
        }

        internal FormData(HttpPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline { get; }

        public virtual Response Basic(RequestContent content, string contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));
            // CUSTOM: AssertNotNull for required contentType
            Argument.AssertNotNull(contentType, nameof(contentType));

            using HttpMessage message = CreateBasicRequest(content, contentType, context);
            return Pipeline.ProcessMessage(message, context);
        }

        public virtual async Task<Response> BasicAsync(RequestContent content, string contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));
            // CUSTOM: AssertNotNull for required contentType
            Argument.AssertNotNull(contentType, nameof(contentType));

            using HttpMessage message = CreateBasicRequest(content, contentType, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        // CUSTOM: Convenience method
        public virtual Response Basic(MultiPartRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using MultipartFormDataRequestContent content = body.ToMultipartContent();
            return Basic(content, content.ContentType, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        // CUSTOM: Convenience method
        public virtual async Task<Response> BasicAsync(MultiPartRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using MultipartFormDataRequestContent content = body.ToMultipartContent();
            return await BasicAsync(content, content.ContentType, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
